#include <cstdio>
#include <iostream>
#include <set>
#include <map>
#include <stack>
#include <algorithm>

#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Instruction.h"
#include "llvm/IRReader/IRReader.h"
#include "llvm/Support/SourceMgr.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

std::set<Instruction*> findTaintedVars(BasicBlock*,std::set<Instruction*>);
std::set<Instruction*> union_sets(std::set<Instruction*>, std::set<Instruction*>);
std::string getSimpleNodeLabel(const BasicBlock *Node);
void printAnalysisMap(std::map<std::string,std::set<Instruction*>> analysisMap);
std::string getSimpleValueLabel(const Value *Val);
std::string getSimpleInstructionLabel(const Instruction *Inst);
std::set<std::string> tainted {"source"};

int main(int argc, char **argv)
{
    // Read the IR file.
    LLVMContext &Context = getGlobalContext();
    SMDiagnostic Err;

    // Extract Module M from IR (assuming only one Module exists)
    Module *M = ParseIRFile(argv[1], Err, Context);
    if (M == nullptr)
    {
      fprintf(stderr, "error: failed to load LLVM IR file \"%s\"", argv[1]);
      return EXIT_FAILURE;
    }

    // 1.Extract Function main from Module M
    Function *F = M->getFunction("main");
    
    // 2.Define analysisMap as a mapping of basic block labels to empty set (of instructions):      
    std::map<std::string,std::set<Instruction*>> analysisMap;
    for (auto &BB: *F){
	std::set<Instruction*> emptySet;
    	analysisMap[getSimpleNodeLabel(&BB)] = emptySet;
    }       
    // Note: All variables are of type "alloca" instructions. Ex.
    // Variable a: %a = alloca i32, align 4

    // 3. Traversing the CFG in Depth First Order
    std::stack<std::pair<BasicBlock*,std::set<Instruction*> > > traversalStack;
    BasicBlock* entryBB = &F->getEntryBlock();
    std::set<Instruction*> emptySet;
    std::pair<BasicBlock*,std::set<Instruction*> > analysisNode = std::make_pair(entryBB,emptySet);
    traversalStack.push(analysisNode);
    

    
    // 4. while the stack is not empty we pop the top analysisNode
    // An updated analysis (list of initialized vars) is generated by running the findTaintedVars on the analysisNode
    // The updated list of initialized vars is unioned with the current list of initialized vars for the basic block in the 
    // analysis Map
    // Finally, the successor nodes of the current basic block with the updated list of initialized vars is added to the stack
    // Extract updatedTaintedVars (The list of initialized variables after BB) from BB and taintedVars
    // from it, and then we add all its successors to it    
    while(!traversalStack.empty()){
        // Pop the top analysis node from stack
        std::pair<BasicBlock*,std::set<Instruction*> > analysisNode = traversalStack.top();
       	traversalStack.pop();
       	
	    // Extract the basic block and the set of initialized variables from  analysisNode
	    BasicBlock* BB = analysisNode.first;
      	std::set<Instruction*> taintedVars = analysisNode.second;     

        // Extract updatedTaintedVars (The list of initialized variables 
	    // after BB) from BB and taintedVars
        //errs() << "Working on basic block: " << getSimpleNodeLabel(BB) << "\n";
        std::set<Instruction*> updatedTaintedVars = findTaintedVars(BB,taintedVars);
        
        // Update the analysis of node BB in the MAP to the union of currently stored taintedVars 
        // and the generated updatedTaintedVars
        std::set<Instruction*> unionTaintedVars = union_sets(analysisMap[getSimpleNodeLabel(BB)],updatedTaintedVars); 
       	analysisMap[getSimpleNodeLabel(BB)] = unionTaintedVars;
        
        
        // Extract the last instruction in the stack (Terminator Instruction)
        const TerminatorInst *TInst = BB->getTerminator();
        
	    // Extract the number of successors the terminator instructor has
	    int NSucc = TInst->getNumSuccessors();
	
	    for (int i = 0;  i < NSucc; ++i) {
            // for all successor basic blocks, add them plus the updatedTaintedVars to the stack 
            // if fixpoint condition is not met.
            // Fixpoint Condition:
            // We only add successor nodes to the stack if the union of the new list of initialzied variables for 
            // the successor node is different from the currently stored list of initialzied variables
            // for the successor node.
            
            // Load the current stored analysis for a successor node
            BasicBlock *Succ = TInst->getSuccessor(i);    
            std::set<Instruction*> succTaintedVars = analysisMap[getSimpleNodeLabel(Succ)];
	        if (succTaintedVars != unionTaintedVars){
	            std::pair<BasicBlock*,std::set<Instruction*> > succAnalysisNode = std::make_pair(Succ,updatedTaintedVars);
	           traversalStack.push(succAnalysisNode);
            }     
    	}	
    
    }
    printAnalysisMap(analysisMap);
    return 0;
}

// Input Arguments:
// BB: current Basic Block  
// taintedVars: The list of initialized vars before BB
// 
// Output:
// updatedTaintedVars: The list of initialized variables after BB
//
// This function receives a list of initialized variables before a basic block
// and returns an updated list of initialized variables after the basic block
std::set<Instruction*> findTaintedVars(BasicBlock* BB,
				    std::set<Instruction*> taintedVars)
{
  std::set<Instruction*> updatedTaintedVars(taintedVars);
  
  // Loop through instructions in BB
  for (auto &I: *BB)
  {
    
    // Check if an Instruction is of the type Store Instruction
    if (isa<StoreInst>(I)){

      Value* left = I.getOperand(0);
      Value* v = I.getOperand(1);

      if (tainted.find(getSimpleValueLabel(left))!= tainted.end()){
        Instruction* var = dyn_cast<Instruction>(v);
        updatedTaintedVars.insert(var);
        tainted.insert(getSimpleValueLabel(v));
      }
    }

    if (isa<LoadInst>(I)){
      Value* left = I.getOperand(0);
      if (tainted.find(getSimpleValueLabel(left))!= tainted.end()){
        //errs() << "Taint found!" << "\n";
        tainted.insert(getSimpleInstructionLabel(&I));
        Instruction* var = dyn_cast<Instruction>(left);
        updatedTaintedVars.insert(var);
      }
    }

    if (isa<AllocaInst>(I)){   
      // We load Arg1 to a an instance of the class Value 
      Value* left = I.getOperand(0);

      if (tainted.find(getSimpleInstructionLabel(&I))!= tainted.end()){
        tainted.insert(getSimpleInstructionLabel(&I));
        updatedTaintedVars.insert(&I);
      }
    }


  }
  return updatedTaintedVars;
}

// Performs set union
std::set<Instruction*> union_sets(std::set<Instruction*>A, std::set<Instruction*> B)
{
     A.insert(B.cbegin(), B.cend());
     return A;
}


// Printing Basic Block Label 
std::string getSimpleNodeLabel(const BasicBlock *Node) {
    if (!Node->getName().empty())
        return Node->getName().str();
    std::string Str;
    raw_string_ostream OS(Str);
    Node->printAsOperand(OS, false);
    return OS.str();
}

std::string getSimpleValueLabel(const Value *Val) {
    if (!Val->getName().empty())
        return Val->getName().str();
    std::string Str;
    raw_string_ostream OS(Str);
    Val->printAsOperand(OS, false);
    return OS.str();
}

std::string getSimpleInstructionLabel(const Instruction *Inst) {
    if (!Inst->getName().empty())
        return Inst->getName().str();
    std::string Str;
    raw_string_ostream OS(Str);
    Inst->printAsOperand(OS, false);
    return OS.str();
}

// Printing Analysis Map  
// When we exit the loop the analysis have finished and the analysis map will point to the set of 
// initialized instructions at each basic block.
void printAnalysisMap(std::map<std::string,std::set<Instruction*>> analysisMap) {
    for (auto& row : analysisMap){
    	std::set<Instruction*> taintedVars = row.second;
    	std::string BBLabel = row.first;
    	errs() << BBLabel << ":\n";
    	for (Instruction* var : taintedVars){
    		errs() << "\t";
    		var->dump();
    	}
    	errs() << "\n";
    } 
}
